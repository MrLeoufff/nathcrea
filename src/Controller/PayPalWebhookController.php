<?php
namespace App\Controller;

use App\Entity\Order;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

class PayPalWebhookController extends AbstractController
{
    private LoggerInterface $logger;
    private EntityManagerInterface $entityManager;

    public function __construct(LoggerInterface $logger, EntityManagerInterface $entityManager)
    {
        $this->logger        = $logger;
        $this->entityManager = $entityManager;
    }

    #[Route('/webhook/paypal', name: 'paypal_webhook', methods: ['POST'])]
    #[IsGranted('PUBLIC_ACCESS')]
    public function handleWebhook(Request $request): Response
    {
        // üü¢ 1Ô∏è‚É£ V√©rifie si la requ√™te arrive bien sur le serveur
        $requestContent = $request->getContent();
        $this->logger->info('üöÄ Webhook PayPal re√ßu avec cette requ√™te brute : ' . $requestContent);

        // üü¢ 2Ô∏è‚É£ V√©rifie si le JSON est valide
        $data = json_decode($requestContent, true);
        if (! $data || ! isset($data['event_type']) || ! isset($data['resource'])) {
            $this->logger->error('‚ùå Webhook PayPal re√ßu mais JSON invalide ou incomplet.', [
                'raw_data' => $requestContent,
            ]);
            return new Response('Donn√©es invalides', Response::HTTP_BAD_REQUEST);
        }

        // üü¢ 3Ô∏è‚É£ Log du type d'√©v√©nement re√ßu
        $eventType = $data['event_type'];
        $resource  = $data['resource'];
        $this->logger->info("üìå Type d'√©v√©nement re√ßu : $eventType");

        // üü¢ 4Ô∏è‚É£ V√©rifie que l'ID de commande PayPal est bien pr√©sent
        if (! isset($resource['id'])) {
            $this->logger->error("‚ùå L'√©v√©nement PayPal $eventType ne contient pas d'ID de commande.");
            return new Response('Invalid event structure', Response::HTTP_BAD_REQUEST);
        }

        // üü¢ 5Ô∏è‚É£ Gestion des diff√©rents √©v√©nements PayPal
        switch ($eventType) {
            case 'CHECKOUT.ORDER.APPROVED':
                $this->logger->info("‚úÖ Commande PayPal approuv√©e : " . $resource['id']);
                break;

            case 'CHECKOUT.ORDER.COMPLETED':
            case 'PAYMENT.CAPTURE.COMPLETED':
                $this->logger->info("‚úÖ Paiement compl√©t√© pour la commande PayPal : " . $resource['id']);

                // üî¥ V√©rifie si la commande existe en base
                $order = $this->entityManager->getRepository(Order::class)->findOneBy(['paypalOrderId' => $resource['id']]);
                if ($order) {
                    $order->setStatus('completed');
                    $this->entityManager->flush();
                    $this->logger->info("‚úÖ Statut de la commande mis √† jour en 'completed'.");
                } else {
                    $this->logger->error("‚ùå Commande introuvable pour PayPalOrderID : " . $resource['id']);
                }
                break;

            case 'PAYMENT.CAPTURE.DENIED':
                $this->logger->error("‚ö†Ô∏è Paiement refus√© pour la commande PayPal : " . $resource['id']);
                break;

            case 'PAYMENT.CAPTURE.REFUNDED':
                $this->logger->info("‚ÑπÔ∏è Paiement rembours√© pour la commande PayPal : " . $resource['id']);
                break;

            default:
                $this->logger->warning("‚ùì √âv√©nement PayPal non g√©r√© : " . $eventType);
        }

        return new Response('Webhook re√ßu et trait√©', Response::HTTP_OK);
    }
}
